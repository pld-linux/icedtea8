diff -dur -x '*~' openjdk.orig/common/autoconf/platform.m4 openjdk/common/autoconf/platform.m4
--- openjdk.orig/common/autoconf/platform.m4	2016-07-25 07:38:20.000000000 +0200
+++ openjdk/common/autoconf/platform.m4	2016-09-21 09:03:56.589063655 +0200
@@ -36,6 +36,12 @@
       VAR_CPU_BITS=64
       VAR_CPU_ENDIAN=little
       ;;
+    x32)
+      VAR_CPU=x32
+      VAR_CPU_ARCH=x86
+      VAR_CPU_BITS=32
+      VAR_CPU_ENDIAN=little
+      ;;
     i?86)
       VAR_CPU=x86
       VAR_CPU_ARCH=x86
@@ -168,7 +174,7 @@
 
   # Convert the autoconf OS/CPU value to our own data, into the VAR_OS/CPU variables.
   PLATFORM_EXTRACT_VARS_FROM_OS($build_os)
-  PLATFORM_EXTRACT_VARS_FROM_CPU($build_cpu)
+  PLATFORM_EXTRACT_VARS_FROM_CPU(x32)
   # ..and setup our own variables. (Do this explicitely to facilitate searching)
   OPENJDK_BUILD_OS="$VAR_OS"
   OPENJDK_BUILD_OS_API="$VAR_OS_API"
@@ -193,7 +199,7 @@
 
   # Convert the autoconf OS/CPU value to our own data, into the VAR_OS/CPU variables.
   PLATFORM_EXTRACT_VARS_FROM_OS($host_os)
-  PLATFORM_EXTRACT_VARS_FROM_CPU($host_cpu)
+  PLATFORM_EXTRACT_VARS_FROM_CPU(x32)
   # ... and setup our own variables. (Do this explicitely to facilitate searching)
   OPENJDK_TARGET_OS="$VAR_OS"
   OPENJDK_TARGET_OS_API="$VAR_OS_API"
@@ -383,6 +389,7 @@
     ppc64)   ZERO_ARCHDEF=PPC64 ;;
     s390*)   ZERO_ARCHDEF=S390  ;;
     sparc*)  ZERO_ARCHDEF=SPARC ;;
+    x32*)    ZERO_ARCHDEF=X32 ;;
     x86_64*) ZERO_ARCHDEF=AMD64 ;;
     x86)     ZERO_ARCHDEF=IA32  ;;
     *)      ZERO_ARCHDEF=$(echo "${OPENJDK_TARGET_CPU_LEGACY_LIB}" | tr a-z A-Z)
--- openjdk/common/autoconf/flags.m4~	2019-04-18 04:46:13.000000000 +0200
+++ openjdk/common/autoconf/flags.m4	2019-05-21 09:04:04.356004924 +0200
@@ -475,6 +475,10 @@ AC_DEFUN_ONCE([FLAGS_SETUP_COMPILER_FLAG
       ppc )
         # on ppc we don't prevent gcc to omit frame pointer nor strict-aliasing
         ;;
+      x32 )
+        COMMON_CCXXFLAGS_JDK="$COMMON_CCXXFLAGS_JDK -fno-omit-frame-pointer -DX32"
+        CFLAGS_JDK="${CFLAGS_JDK} -fno-strict-aliasing"
+        ;;
       * )
         CCXXFLAGS_JDK="$CCXXFLAGS_JDK -fno-omit-frame-pointer"
         CFLAGS_JDK="${CFLAGS_JDK} -fno-strict-aliasing"
diff -dur -x '*~' openjdk.orig/hotspot/src/os/linux/vm/os_linux.cpp openjdk/hotspot/src/os/linux/vm/os_linux.cpp
--- openjdk.orig/hotspot/src/os/linux/vm/os_linux.cpp	2016-09-20 13:22:05.697032126 +0200
+++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp	2016-09-21 09:03:56.592397163 +0200
@@ -1911,7 +1911,7 @@
 
   #if  (defined IA32)
     static  Elf32_Half running_arch_code=EM_386;
-  #elif   (defined AMD64)
+  #elif  (defined AMD64) || (defined X32)
     static  Elf32_Half running_arch_code=EM_X86_64;
   #elif  (defined IA64)
     static  Elf32_Half running_arch_code=EM_IA_64;
diff -dur -x '*~' openjdk.orig/hotspot/src/share/vm/utilities/taskqueue.hpp openjdk/hotspot/src/share/vm/utilities/taskqueue.hpp
--- openjdk.orig/hotspot/src/share/vm/utilities/taskqueue.hpp	2016-07-25 07:38:24.000000000 +0200
+++ openjdk/hotspot/src/share/vm/utilities/taskqueue.hpp	2016-09-21 09:03:56.592397163 +0200
@@ -400,7 +400,7 @@
   // Architectures with weak memory model require a barrier here
   // to guarantee that bottom is not older than age,
   // which is crucial for the correctness of the algorithm.
-#if !(defined SPARC || defined IA32 || defined AMD64)
+#if !(defined SPARC || defined IA32 || defined AMD64 || defined X32)
   OrderAccess::fence();
 #endif
   uint localBot = OrderAccess::load_acquire((volatile juint*)&_bottom);
diff -dur -x '*~' openjdk.orig/jdk/make/gensrc/GensrcX11Wrappers.gmk openjdk/jdk/make/gensrc/GensrcX11Wrappers.gmk
--- openjdk.orig/jdk/make/gensrc/GensrcX11Wrappers.gmk	2016-07-25 07:38:26.000000000 +0200
+++ openjdk/jdk/make/gensrc/GensrcX11Wrappers.gmk	2016-09-21 09:12:46.033398082 +0200
@@ -86,10 +86,7 @@
 	$(MKDIR) -p $(@D)
 	$(TOOL_WRAPPERGENERATOR) $(@D) $(GENSRC_SIZER_DIR)/xlibtypes.txt "sizer" $*
 
-  # use -m32/-m64 only if the compiler supports it
-  ifeq ($(COMPILER_SUPPORTS_TARGET_BITS_FLAG), true)
-    MEMORY_MODEL_FLAG="$(COMPILER_TARGET_BITS_FLAG)$*"
-  endif
+  MEMORY_MODEL_FLAG="-mx32"
 
   # Compile the C code into an executable.
   $(GENSRC_X11WRAPPERS_TMP)/sizer.%.exe: $(GENSRC_X11WRAPPERS_TMP)/sizer.%.c
